package services

import (
	"$MODULENAME$/data"
	"$MODULENAME$/dto"
	"$MODULENAME$/errors"

	"github.com/emirkosuta/celeritas"
)

type $SERVICENAME$ServiceImpl struct {
	App  *celeritas.Celeritas
	repo data.$SERVICENAME$
}

func New$SERVICENAME$ServiceImpl(app *celeritas.Celeritas, repo data.$SERVICENAME$) $SERVICENAME$Service {
	return &$SERVICENAME$ServiceImpl{
		App:  app,
		repo: repo,
	}
}

func (h *$SERVICENAME$ServiceImpl) Create$SERVICENAME$(input dto.Create$SERVICENAME$DTO) (*dto.$SERVICENAME$ResponseDTO, error) {
	data := input.To$SERVICENAME$()

	id, err := h.repo.Insert(*data)
	if err != nil {
		return nil, errors.ErrInternalServer
	}

	data, err = data.Get(id)
	if err != nil {
		return nil, errors.ErrInternalServer
	}

	res := dto.To$SERVICENAME$ResponseDTO(*data)

	return &res, nil
}

func (h *$SERVICENAME$ServiceImpl) Update$SERVICENAME$(id int, input dto.Update$SERVICENAME$DTO) (*dto.$SERVICENAME$ResponseDTO, error) {
	data, _ := h.repo.Get(id)
	input.To$SERVICENAME$(data)

	err := h.repo.Update(*data)
	if err != nil {
		return nil, errors.ErrInternalServer
	}

	response := dto.To$SERVICENAME$ResponseDTO(*data)

	return &response, nil
}

func (h *$SERVICENAME$ServiceImpl) Delete$SERVICENAME$(id int) error {
	err := h.repo.Delete(id)
	if err != nil {
		h.App.ErrorLog.Println(err)
		return errors.ErrInternalServer
	}

	return nil
}

func (h *$SERVICENAME$ServiceImpl) Get$SERVICENAME$(id int) (*dto.$SERVICENAME$ResponseDTO, error) {
	data, err := h.repo.Get(id)
	if err != nil {
		h.App.ErrorLog.Println(err)
		return nil, errors.ErrNotFound
	}
	response := dto.To$SERVICENAME$ResponseDTO(*data)

	return &response, nil
}

func (h *$SERVICENAME$ServiceImpl) Get$SERVICENAME$List() ([]dto.$SERVICENAME$ResponseDTO, error) {
	data, err := h.repo.GetAll(nil)
	if err != nil {
		h.App.ErrorLog.Println(err)
		return nil, errors.ErrInternalServer
	}
	response := dto.To$SERVICENAME$ListResponseDTO(data)

	return response, nil
}
