package handlers

import (
	"net/http"
	"strconv"
	"time"

	"$MODULENAME$/dto"
	"$MODULENAME$/errors"
	"$MODULENAME$/services"

	"github.com/emirkosuta/celeritas"
)

type authHandlerImpl struct {
	App     *celeritas.Celeritas
	service services.AuthService
}

func NewAuthHandler(app *celeritas.Celeritas, authService services.AuthService) AuthHandler {
	return &authHandlerImpl{
		App:     app,
		service: authService,
	}
}

func (h *authHandlerImpl) Login(w http.ResponseWriter, r *http.Request) {
	var loginInput dto.LoginInput

	h.App.ReadJSON(w, r, &loginInput)

	token, err := h.service.Login(loginInput)
	if err != nil {
		h.App.WriteErrorResponse(w, errors.MapErrorToStatusCode(err), err)
		return
	}

	cookieExpireDuration, _ := time.ParseDuration(h.App.JwtToken.JwtRefreshTokenTimeExp.String())
	cookie := &http.Cookie{
		Name:     "refresh_token",
		Value:    token.RefreshToken.Value,
		MaxAge:   0,
		HttpOnly: true,
		Expires:  time.Now().Add(cookieExpireDuration),
		Path:     "/",
	}

	http.SetCookie(w, cookie)
	h.App.WriteDataResponse(w, http.StatusOK, "", token)
}

func (h *authHandlerImpl) RefreshToken(w http.ResponseWriter, r *http.Request) {
	userIdString := r.Header.Get("id")
	iat := r.Header.Get("iat")
	refreshToken := r.Header.Get("refresh_token")
	userId, _ := strconv.Atoi(userIdString)

	token, err := h.service.RefreshToken(userId, refreshToken, iat)
	if err != nil {
		h.App.WriteErrorResponse(w, errors.MapErrorToStatusCode(err), err)
		return
	}

	cookieExpireDuration, _ := time.ParseDuration(h.App.JwtToken.JwtRefreshTokenTimeExp.String())
	cookie := &http.Cookie{
		Name:     "refresh_token",
		Value:    token.RefreshToken.Value,
		MaxAge:   0,
		HttpOnly: true,
		Expires:  time.Now().Add(cookieExpireDuration),
		Path:     "/",
	}

	http.SetCookie(w, cookie)
	h.App.WriteDataResponse(w, http.StatusOK, "", token)
}

func (h *authHandlerImpl) Logout(w http.ResponseWriter, r *http.Request) {
	userIdString := r.Header.Get("id")
	userId, _ := strconv.Atoi(userIdString)

	err := h.service.Logout(userId)
	if err != nil {
		h.App.WriteErrorResponse(w, errors.MapErrorToStatusCode(err), err)
		return
	}

	h.App.WriteSuccessResponse(w, http.StatusOK, "Successfully revoked tokens", nil)
}

func (h *authHandlerImpl) ForgotPassword(w http.ResponseWriter, r *http.Request) {
	var forgotPasswordInput dto.ForgotPassword
	h.App.ReadJSON(w, r, &forgotPasswordInput)

	err := h.service.ForgotPassword(forgotPasswordInput)
	if err != nil {
		h.App.WriteErrorResponse(w, errors.MapErrorToStatusCode(err), err)
		return
	}

	h.App.WriteSuccessResponse(w, http.StatusOK, "Email sent")
}

func (h *authHandlerImpl) ResetPasswordVerify(w http.ResponseWriter, r *http.Request) {
	// get form values
	email := r.URL.Query().Get("email")
	token := r.URL.Query().Get("hash")

	res, err := h.service.ResetPasswordVerify(email, token)
	if err != nil {
		h.App.WriteErrorResponse(w, errors.MapErrorToStatusCode(err), err)
		return
	}

	h.App.WriteDataResponse(w, http.StatusOK, "Reset password link verified", res)
}

func (h *authHandlerImpl) ResetPassword(w http.ResponseWriter, r *http.Request) {
	var input dto.ResetPassword
	h.App.ReadJSON(w, r, &input)

	v := h.App.Validator().ValidateStruct(&input)
	if !v.Valid() {
		h.App.WriteErrorResponseWithData(w, errors.MapErrorToStatusCode(errors.ErrBadRequest), errors.ErrBadRequest, v.Errors)
		return
	}

	err := h.service.ResetPassword(input)
	if err != nil {
		h.App.WriteErrorResponse(w, errors.MapErrorToStatusCode(err), err)
		return
	}

	h.App.WriteSuccessResponse(w, http.StatusOK, "Password reset successful")
}
